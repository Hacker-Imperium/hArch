#!/usr/bin/env bash

# ---------------------------------------------------------------
#sArchPost - Post install - Downloaded after sArch finishes    |
# ---------------------------------------------------------------
# Author    : Binary-Brawler                                     |
# Github    : github.com/Binary-Brawler                          |
# LinkedIn  : linkedin.com/in/brandon-walker-0b0542116/          |
# Version   : 1.0.0                                              |
# Intent    : Server-ready Arch Linux for Dell EMC R540         |
#               - Intel C620 series chipset RAID support        |
#               - SSH enabled by default                         |
#               - Server-optimized packages                      |
#               - Monitoring and management tools                |
#               - Enterprise-grade security                      |
# ---------------------------------------------------------------
#                  Function - Purpose                            |
# -----------------------------------------------------------------------------------
# slear                       - Repeated Sleep/Clear function                        |
# greeter                     - Entrypoint                                           |
# p_Download                  - Checks boolean value from previous script            |
# installer                   - Set Hostname & install useful packages               |
# server_Setup                - Sets up server-specific services and configurations |
# monitoring_Setup            - Installs monitoring and management tools             |
# raid_Setup                  - Configures Intel C620 series RAID support           |
# user_Info                   - Set ROOT pass and create user account                |
# booter                      - Bootloader function, eventually will be automated    |
# security_Setup              - Configures SSH, firewall, and security              |
# complete                    - Finish last minute setup and cleanup                 |
# one_Func_To_Rule_Them_All   - Iterative function to run functions                  |
# and_In_The_Script_Bind_Them - Encoded functions to run                             |
# -----------------------------------------------------------------------------------

# Constants
GREEN='\033[0;32m'
RED='\033[0;31m'
WHITE='\033[0;37m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RESET='\033[0m'
NEWLINE=$'\n'
GITHUB='https://raw.githubusercontent.com/Binary-Brawler/hArch'

# Logging
log_warning() { echo -e "[${YELLOW}WARNING${RESET}] $1"; }
log_error() { echo -e "[${RED}ERROR${RESET}] $1"; }
print_info() { echo -e "[${GREEN}INFO${RESET}] $1${NEWLINE}"; }
log_success() {
    local num_quotes=${#motivational_quotes[@]}
    local random_index=$((RANDOM % num_quotes))
    local random_quote="${motivational_quotes[$random_index]}"
    echo -e "${GREEN}[SUCCESS]${RESET} $1"
    echo ${NEWLINE}
    echo ${NEWLINE}
    echo "Server Quote: $random_quote"
    echo ${NEWLINE}
    echo ${NEWLINE}
}

motivational_quotes=(
    "A server is only as good as its administrator. - Server Wisdom"
    "Uptime is not just a metric, it's a promise. - Enterprise Philosophy"
    "In servers we trust, in backups we believe. - IT Proverb"
    "The best server is the one you never have to think about. - System Admin Truth"
    "Performance is not an accident, it's a design choice. - Architecture Principle"
    "Reliability is the foundation of all server operations. - Infrastructure Law"
    "A well-configured server is a happy server. - DevOps Mantra"
)

function slear {
    sleep 3
    clear
}

function p_Download {
    slear
    echo "--------------------------------"
    enable_parallel=$(cat /enable_parallel.txt)

    if [ "$enable_parallel" = "true" ]; then
        sed -i '/#ParallelDownloads/s/^#//g' /etc/pacman.conf
        print_info "Parallel Downloads Enabled."
        rm /enable_parallel.txt
    else
        print_info "Parallel Downloads Disabled."
        rm /enable_parallel.txt
    fi
}

function installer {
    echo "-------------------------------------------------------"
    print_info "What would you like your server name set too..."
    read -p "Enter Server Hostname: " hostname
    echo $hostname > /etc/hostname
    slear
    echo  "------------------------------------"
    print_info "Installing server packages..." 
    pacman -S openssh iptables-nft ufw fail2ban rsync htop iotop nethogs \
        lsof net-tools bind-tools curl wget git vim nano \
        systemd-resolvconf chrony logrotate \
        mdadm lvm2 smartmontools hdparm \
        intel-ucode microcode_ctl \
        zsh fish tree mlocate \
        docker docker-compose \
        nginx apache mariadb postgresql \
        prometheus node_exporter \
        ansible salt-minion \
        --noconfirm >/dev/null 2>&1
    hwclock --systohc
}

function server_Setup {
    echo "------------------------"
    print_info "Setting up server services..."
    
    # Enable essential services
    systemctl enable sshd >/dev/null 2>&1
    systemctl enable chronyd >/dev/null 2>&1
    systemctl enable systemd-resolved >/dev/null 2>&1
    systemctl enable fail2ban >/dev/null 2>&1
    systemctl enable ufw >/dev/null 2>&1
    
    # Configure timezone
    print_info "Setting timezone to UTC..."
    ln -sf /usr/share/zoneinfo/UTC /etc/localtime
    
    # Configure locale
    print_info "Configuring locale..."
    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
    echo "LANG=en_US.UTF-8" > /etc/locale.conf
    locale-gen >/dev/null 2>&1
    
    # Configure systemd-resolved
    print_info "Configuring DNS resolution..."
    echo "nameserver 8.8.8.8" > /etc/resolv.conf
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf
    
    # Configure logrotate
    print_info "Configuring log rotation..."
    cat > /etc/logrotate.d/server << 'EOF'
/var/log/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 644 root root
}
EOF
}

function monitoring_Setup {
    echo "--------------------------------"
    read -p "Install monitoring tools? [Y/n]: " monitoring
    if [[ $monitoring == 'y' || $monitoring == 'Y' || $monitoring == '' ]]; then
        echo "-------------------------------------------------------"
        print_info "Setting up monitoring environment..."
        echo "-------------------------------------------------------"
        
        # Create monitoring user
        useradd -r -s /bin/false prometheus
        useradd -r -s /bin/false node_exporter
        
        # Create directories
        mkdir -p /etc/prometheus
        mkdir -p /var/lib/prometheus
        mkdir -p /var/lib/node_exporter
        
        # Configure Prometheus
        cat > /etc/prometheus/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
  
  - job_name: 'node'
    static_configs:
      - targets: ['localhost:9100']
EOF

        # Configure systemd services
        cat > /etc/systemd/system/prometheus.service << 'EOF'
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/usr/share/prometheus/consoles \
    --web.console.libraries=/usr/share/prometheus/console_libraries \
    --web.listen-address=0.0.0.0:9090

[Install]
WantedBy=multi-user.target
EOF

        cat > /etc/systemd/system/node_exporter.service << 'EOF'
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/bin/node_exporter

[Install]
WantedBy=multi-user.target
EOF

        # Set ownership
        chown -R prometheus:prometheus /etc/prometheus
        chown -R prometheus:prometheus /var/lib/prometheus
        chown -R node_exporter:node_exporter /var/lib/node_exporter
        
        # Enable services
        systemctl enable prometheus >/dev/null 2>&1
        systemctl enable node_exporter >/dev/null 2>&1
        
        print_info "✓ Monitoring tools configured"
    else
        log_warning "Skipping monitoring setup..."
    fi
}

function raid_Setup {
    echo "----------------------------------"
    print_info "Setting up Intel C620 series RAID support..."
    sleep 2
    
    # Load RAID modules
    print_info "Loading RAID modules..."
    modprobe md_mod
    modprobe raid1
    modprobe raid0
    modprobe raid10
    modprobe raid456
    modprobe linear
    
    # Intel RST/RSTe support for C620 series
    print_info "Loading Intel RST/RSTe modules..."
    modprobe ahci
    modprobe intel_ahci
    
    # Add modules to mkinitcpio
    print_info "Adding RAID modules to initramfs..."
    sed -i 's/MODULES=()/MODULES=(md_mod raid1 raid0 raid10 raid456 linear ahci intel_ahci)/' /etc/mkinitcpio.conf
    
    # Configure mdadm
    print_info "Configuring mdadm..."
    cat > /etc/mdadm.conf << 'EOF'
# mdadm configuration file
DEVICE partitions
MAILADDR root
AUTO +all
EOF

    # Enable mdadm monitoring
    systemctl enable mdmonitor >/dev/null 2>&1
    
    print_info "✓ Intel C620 RAID support configured"
    print_info "Note: Configure your RAID arrays using mdadm after installation"
}

function user_Info {
    echo "--------------------------------"
    print_info "Setting Root password..."
    passwd || log_error "Failed to set password for ROOT"
    slear
    echo "-------------------------------"
    print_info "Creating server admin account..."
    read -p "Enter Admin Username: " username
    useradd -mg users -G wheel,power,storage,docker -s /usr/bin/bash $username
    echo '%wheel ALL=(ALL:ALL) ALL' >> /etc/sudoers.d/wheel_group
    chmod 440 /etc/sudoers.d/wheel_group
    echo "-------------------------------------"
    print_info "Setting $username password..."
    passwd $username || log_error "Failed to set password for user $username."
    
    # Create .ssh directory for admin user
    mkdir -p /home/$username/.ssh
    chmod 700 /home/$username/.ssh
    chown $username:$username /home/$username/.ssh
    
    # Create AUR directory
    mkdir -p /home/$username/AUR
    chown -R $username /home/$username/AUR
    
    print_info "✓ Server admin account created"
}

function security_Setup {
    echo "----------------------------------"
    print_info "Configuring server security..."
    
    # SSH Configuration
    print_info "Configuring SSH..."
    cp /etc/server-config/ssh_config /etc/ssh/sshd_config
    
    # Firewall Configuration
    print_info "Configuring firewall..."
    cp /etc/server-config/firewall_rules /etc/ufw/user.rules
    
    # Fail2ban Configuration
    print_info "Configuring fail2ban..."
    cat > /etc/fail2ban/jail.local << 'EOF'
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = ssh
logpath = /var/log/auth.log
maxretry = 3
EOF

    # System hardening
    print_info "Applying system hardening..."
    
    # Disable unnecessary services
    systemctl disable bluetooth >/dev/null 2>&1
    systemctl disable cups >/dev/null 2>&1
    
    # Configure kernel parameters
    cat >> /etc/sysctl.conf << 'EOF'
# Security hardening
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.ip_forward = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.tcp_syncookies = 1
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
EOF

    print_info "✓ Security configuration completed"
}

function booter {
    echo "-----------------------------"
    print_info "Setting Bootloader..."
    drives=$(lsblk -f)
    echo -e "$drives${NEWLINE}"
    echo -e "[${YELLOW}SYNTAX${RESET}] If BIOS, attach bootloader to disk: ex- /dev/sda"
    echo -e "[${YELLOW}SYNTAX${RESET}] If UEFI, attach bootloader to partition: ex- /dev/nvme0n1p1"
    echo "-----------------------------------------------------------------------------------------------------"
    read -p "Enter Drive/Partition to install Bootloader [Example: /dev/nvme0n1p1]: " drive
    slear
    
    # Use firmware type detected by sArch script
    local is_uefi=false
    if [[ -f "/firmware_type.txt" ]]; then
        is_uefi=$(cat /firmware_type.txt)
        if [[ "$is_uefi" == "true" ]]; then
            print_info "Using UEFI firmware (detected by sArch)"
        else
            print_info "Using BIOS firmware (detected by sArch)"
        fi
        rm /firmware_type.txt
    else
        # Fallback to detection if file not found
        log_warning "firmware_type.txt not found, falling back to detection"
        if [[ -d "/sys/firmware/efi/efivars/" ]] && [[ -d "/sys/firmware/efi" ]] && [[ -f "/sys/firmware/efi/fw_platform_size" ]]; then
            if ls /sys/firmware/efi/efivars/ >/dev/null 2>&1; then
                is_uefi=true
                print_info "Detected UEFI firmware"
            else
                print_info "EFI directory exists but variables not accessible - treating as BIOS"
            fi
        else
            print_info "Detected BIOS firmware"
        fi
    fi
    
    if [[ "$is_uefi" == "true" ]]; then
        echo "-------------------------------------"
        print_info "Installing UEFI Bootloader..."
        pacman -S efibootmgr grub dosfstools mtools os-prober --noconfirm >/dev/null
        grub-install --target=x86_64-efi --bootloader-id=SARCH_UEFI --efi-directory=/boot/EFI --recheck
        grub-mkconfig -o /boot/grub/grub.cfg
        mkinitcpio -p linux
    else
        echo "-------------------------------------"
        print_info "Installing BIOS Bootloader..."
        pacman -S grub --noconfirm >/dev/null
        grub-install --target=i386-pc $drive --recheck
        grub-mkconfig -o /boot/grub/grub.cfg
        mkinitcpio -p linux
    fi
}

function docker_Setup {
    echo "---------------------------------------------------------------"
    read -p 'Do you want to INSTALL Docker for containerization? [Y/n]: ' docker
    if [[ $docker == 'y' || $docker == 'Y' || $docker == '' ]]; then
        print_info "Configuring Docker..."
        echo "------------------------------------"
        
        # Enable Docker service
        systemctl enable docker >/dev/null 2>&1
        
        # Add user to docker group
        usermod -aG docker $username >/dev/null 2>&1
        
        # Configure Docker daemon
        mkdir -p /etc/docker
        cat > /etc/docker/daemon.json << 'EOF'
{
    "log-driver": "json-file",
    "log-opts": {
        "max-size": "10m",
        "max-file": "3"
    },
    "storage-driver": "overlay2"
}
EOF
        
        print_info "Docker configured successfully!"
        echo "------------------------------------"
        print_info "Docker service will start on boot"
        print_info "User $username added to docker group"
        log_success "Docker ready for containerization!"
    else
        log_warning "Skipping Docker installation..."
    fi
}

function complete {
    slear
    echo "-------------------------------------------------------------------------------------------------"
    neofetch
    echo "-------------------------------------------------------------------------------------------------"
    log_success "sArch has been successfully installed on your Dell EMC R540 server"
    print_info "-------------------------------------------------------"
    print_info "Server is ready for production deployment, $username!"
    print_info "-------------------------------------------------------"
    print_info "Key Features Installed:"
    echo "  ✓ SSH Server (enabled)"
    echo "  ✓ Firewall (UFW configured)"
    echo "  ✓ Fail2ban (intrusion prevention)"
    echo "  ✓ Intel C620 RAID support"
    echo "  ✓ Monitoring tools (Prometheus/Node Exporter)"
    echo "  ✓ Docker containerization"
    echo "  ✓ Security hardening applied"
    print_info "-------------------------------------------------------"
    print_info "Next Steps:"
    echo "  1. Configure your RAID arrays: mdadm --create"
    echo "  2. Set up your applications and services"
    echo "  3. Configure monitoring dashboards"
    echo "  4. Set up automated backups"
    print_info "-------------------------------------------------------"
    log_warning "A reboot should now take place"
    print_info "Run the following commands to reboot properly:"
    log_warning "1: exit"
    log_warning "2: umount -a"
    log_warning "3: reboot"
    rm /sArchPost
    rm -rf /etc/server-config
    exit
}

function one_Func_To_Rule_Them_All {
    local funcs=($(and_In_The_Script_Bind_Them))

    for func in "${funcs[@]}"; do
        $func
        slear
    done
}

# Server-focused function sequence
function and_In_The_Script_Bind_Them {
    local encoded="cF9Eb3dubG9hZCBpbnN0YWxsZXIgc2VydmVyX1NldHVwIG1vbml0b3JpbmdfU2V0dXAgcmFpZF9TZXR1cCB1c2VyX0luZm8gc2VjdXJpdHlfU2V0dXAgYm9vdGVyIGRvY2tlcl9TZXR1cCBjb21wbGV0ZQo="
    
    # Decode the function sequence
    echo "$encoded" | base64 --decode
}

one_Func_To_Rule_Them_All
