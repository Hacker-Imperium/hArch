#!/usr/bin/env bash

# ---------------------------------------------------------------
# hArch Installer (Hackers Arch)                                 |
# ---------------------------------------------------------------
# Author    : Binary-Brawler                                     |
# Github    : github.com/Binary-Brawler                          |
# LinkedIn  : linkedin.com/in/brandon-walker-0b0542116/          |
# Version   : 1.1.3                                              |
# Intent    : Simplistic Linux box for Red Teaming/Pentesting    |
#               - BlackArch Repo (Access to tools)               |
#               - Lightwieght distro for older machines          |
#               - vimrc/nvim/vscode (for coders)                 |
#               - Much efficient install VS Kali/Parrot ;)       |
# ---------------------------------------------------------------
#                  Function - Purpose                            |
# ---------------------------------------------------------------------------
# slear               - Repeated Sleep/Clear function                        |
# greeter             - Entrypoint                                           |
# check_Net           - Checks internet speed for parallel downloads         |
# calculate_Swap_Size - if/else to determine SWAP size                       |
# partition_Drive     - Automated partitioning following basic Arch install  |
# installer           - Install base system and copy hArchPost script        |
# last_Min_Setup      - Installs second script in /mnt and                   |
# ---------------------------------------------------------------------------
# Constants
GREEN='\033[0;32m'
RED='\033[0;31m'
WHITE='\033[0;37m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RESET='\033[0m'
NEWLINE=$'\n'
GITHUB='https://raw.githubusercontent.com/Binary-Brawler/hArch'

# Logging
log_warning() { echo -e "[${YELLOW}WARNING${RESET}] $1"; }
log_error() { echo -e "[${RED}ERROR${RESET}] $1"; }
print_info() { echo -e "[${GREEN}INFO${RESET}] $1${NEWLINE}"; }
log_success() { echo -e "[SUCCESS] $1"; }

function slear {
    sleep 3
    clear
}

function greeter {
    slear
	echo -e "${PURPLE}Hackers Arch Installer${RESET}"
	echo ${NEWLINE}
	echo ${NEWLINE}
    echo "-------------------------------------------------------------------------------------------------"
	echo -e ${YELLOW}
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo " ██░ ██  ▄▄▄       ██▀███   ▄████▄   ██░ ██     ██▓     ██▓ ███▄    █  █    ██ ▒██   ██▒"
	echo "▓██░ ██▒▒████▄    ▓██ ▒ ██▒▒██▀ ▀█  ▓██░ ██▒   ▓██▒    ▓██▒ ██ ▀█   █  ██  ▓██▒▒▒ █ █ ▒░"
	echo "▒██▀▀██░▒██  ▀█▄  ▓██ ░▄█ ▒▒▓█    ▄ ▒██▀▀██░   ▒██░    ▒██▒▓██  ▀█ ██▒▓██  ▒██░░░  █   ░"
	echo "░▓█ ░██ ░██▄▄▄▄██ ▒██▀▀█▄  ▒▓▓▄ ▄██▒░▓█ ░██    ▒██░    ░██░▓██▒  ▐▌██▒▓▓█  ░██░ ░ █ █ ▒ "
	echo "░▓█▒░██▓ ▓█   ▓██▒░██▓ ▒██▒▒ ▓███▀ ░░▓█▒░██▓   ░██████▒░██░▒██░   ▓██░▒▒█████▓ ▒██▒ ▒██▒"
	echo " ▒ ░░▒░▒ ▒▒   ▓▒█░░ ▒▓ ░▒▓░░ ░▒ ▒  ░ ▒ ░░▒░▒   ░ ▒░▓  ░░▓  ░ ▒░   ▒ ▒ ░▒▓▒ ▒ ▒ ▒▒ ░ ░▓ ░"
	echo " ▒ ░▒░ ░  ▒   ▒▒ ░  ░▒ ░ ▒░  ░  ▒    ▒ ░▒░ ░   ░ ░ ▒  ░ ▒ ░░ ░░   ░ ▒░░░▒░ ░ ░ ░░   ░▒ ░"
	echo " ░  ░░ ░  ░   ▒     ░░   ░ ░         ░  ░░ ░     ░ ░    ▒ ░   ░   ░ ░  ░░░ ░ ░  ░    ░  "
	echo " ░  ░  ░      ░  ░   ░     ░ ░       ░  ░  ░       ░  ░ ░           ░    ░      ░    ░  "
	echo "                           ░                                                            "
	echo -e "${RESET}"
	echo ${NEWLINE}
	echo ${NEWLINE}
    echo "-------------------------------------------------------------------------------------------------"
}

function check_Net {
    echo "---------------------------------------"
    print_info "Checking Internet Connection..."
    
    if ! command -v speedtest-cli &>/dev/null; then
        print_info "speedtest-cli is not installed. Installing..."
        pacman -Sy >/dev/null
        python3 -m venv speedTest && cd speedTest/bin/ && ./pip3 install speedtest-cli >/dev/null
    fi
    
    print_info "Calculating Internet Speed..."
    sleep 1
    local speed=$(./speedtest-cli --simple | awk '/^Download:/ {print $2}')
    sleep 1
    echo "------------------------------------"
    print_info "Download Speed: $speed Mbps"
    echo "------------------------------------"

    if (( $(echo "$speed > 50" | bc -l) )); then
        print_info "Enabling Parallel Downloads..."
        sed -i '/#ParallelDownloads/s/^#//g' /etc/pacman.conf
        echo "true" > enable_parallel.txt
    else
        print_info "Keeping Parallel Downloads Disabled as speed is too slow."
        echo "false" > enable_parallel.txt
    fi
}

# Calculate Swap Size Based on System RAM
# Improve this...
function calculate_Swap_Size {
    local ram_gb=$(free -g | awk '/^Mem:/{print $2}')
    local swap_size="2G"

    if [[ ! $ram_gb =~ ^[0-9]+$ ]]; then
        log_error "Error: Could not determine RAM size." >&2
        exit 1
    fi

    if ((ram_gb < 2)); then
        swap_size="${ram_gb}"
    elif ((ram_gb < 4)); then
        swap_size="3G"
    elif ((ram_gb < 16)); then
        swap_size="4G"
    else
        swap_size="8G"
    fi

    echo "$swap_size"
}

function partition_Drive {
    local drive="$1"
    local swap_size=$(calculate_Swap_Size)
    local cmd_list=()

    if [[ -d "/sys/firmware/efi/efivars/" ]]; then
        cmd_list=(
            "g"                          
            "n" "" "" "+512M"            
            "n" "" "" "+$swap_size"      
            "n" "" "" ""                 
            "t" "1" "1"                  
            "t" "2" "19"                 
            "w"                          
        )

    else
        cmd_list=(
            "o" "n" "p" "" "" "+$swap_size"   
            "n" "p" "" "" ""                  
            "t" "1" "82"                      
            "w"                               
        )

    fi

    printf "%s\n" "${cmd_list[@]}" | fdisk "$drive" >/dev/null 2>&1

    if [[ $? -ne 0 ]]; then
        echo "Error: Failed to partition the drive."
        return 1
    fi

    if [[ -d "/sys/firmware/efi/efivars/" ]]; then
        if [[ $drive == *nvme* ]]; then
            mkfs.fat -F32 "${drive}p1" 
            mkswap "${drive}p2"         
            mkfs.ext4 "${drive}p3"      

            mount "${drive}p3" /mnt
            mkdir -p /mnt/boot/EFI
            mount "${drive}p1" /mnt/boot/EFI
            swapon "${drive}p2"
        elif [[ $drive == *sd* ]]; then
            mkfs.fat -F32 "${drive}1" 
            mkswap "${drive}2"         
            mkfs.ext4 "${drive}3"      

            mount "${drive}3" /mnt
            mkdir -p /mnt/boot/EFI
            mount "${drive}1" /mnt/boot/EFI
            swapon "${drive}2"
        else
            echo "Error: Something went wrong with UEFI install..."
            return 1
        fi
    else
        if [[ $drive == *sd* ]]; then
            mkswap "${drive}1"         
            mkfs.ext4 "${drive}2"      

            swapon "${drive}1"
            mount "${drive}2" /mnt
        else
            echo "Error: Something happened with BIOS install..."
            return 1
        fi 
    fi
}

function installer {
    echo "--------------------------------"
    print_info "Installing Arch base..."
    sleep 2
    pacstrap /mnt base base-devel linux linux-firmware vi vim nano dhcpcd iwd >/dev/null 2>&1
    sleep 2
    genfstab -U /mnt >> /mnt/etc/fstab
}

function last_Min_Setup {
    echo "--------------------------------------"
    print_info "Finishing last minute setup..."
    echo 0 > /proc/sys/kernel/hung_task_timeout_secs
    mv enable_parallel.txt /mnt
    curl -O $GITHUB/main/hArchPost >/dev/null 2>&1
    chmod +x hArchPost
    mv hArchPost /mnt
    echo  "----------------------------"
    print_info "Time to enter CHROOT"
    print_info "The final script has been installed and moved to your new root directory"
    print_info "Run these commands to finish setup"
    echo "------------------------------------------"
    echo ${NEWLINE}
    echo ${NEWLINE}
    echo -e "[1]${GREEN} arch-chroot /mnt${RESET}"
    echo -e "[2]${GREEN} ./hArchPost${RESET}"
    echo ${NEWLINE}
}

main() {
    greeter
    slear
    check_Net || { log_error "Check your Internet"; exit 1; }
    slear
    echo "----------------------------"
    print_info "Gathering drives..."
    echo ${NEWLINE}
    lsblk #TODO: Add something more robust
    echo ${NEWLINE}
    print_info "Time to select the drive you want too partition..."
    print_info "If you want to manually partition you may, just type exit after mounting /mnt"
    print_info "Otherwise, automated partition will create the standard BIOS/UEFI partitions"
    echo ${NEWLINE}
    echo "--------------------------------------"
    read -p "Manually partition [y/N]: " manual

    if [[ $manual == 'y' || $manual == 'Y' ]]; then
        echo "--------------------------------------"
        cfdisk "$drive"
        print_info "Entering BASH shell. Create filesystem and mount /mnt. Type exit once finished."
        echo "-----------------------------------------------------------------------------------------"
        bash
    else
        echo "----------------------------------------------"
        read -p "Enter Drive to prepare (e.g., /dev/sda): " drive
        echo "----------------------------"
        print_info "Modifying $drive..."
        sleep 3

        partition_Drive "$drive"
    fi

    installer || { log_error "Base system installation failed. Exiting."; exit 1; }

    slear
    
    last_Min_Setup || { log_warning "Last minute setup encountered issues."; exit 1; }

    log_success "hArch Installation completed successfully!"

}

main
